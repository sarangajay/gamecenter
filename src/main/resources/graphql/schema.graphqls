type GamerDTO {
    gamerId: ID!
    name: String!
    gender: String
    nickname: String!
    geography: String!
    games: [GameDTO]!
}

type GameDTO {
    gameId: ID!
    name: String!
    level: String!
    credits: Int
}

type GamerCreditDTO {
    gamerId: ID!
    gamerName: String!
    gameId: ID!
    gameName: String!
    level: String!
    credits: Int
}

type GamerDataDTO {
    gamerName: String!
    gender: String!
    nickname: String!
    geography: String!
    gameName: String!
    level: String!
}

input GamerInput {
    name: String!
    gender: String
    nickname: String!
    geography: String!
    games: [GameInput]!
}

input GameInput {
    name: String!
    level: String!
}

type Mutation {
    enrollGamer(input: GamerInput!): GamerDTO!,
    grantCreditToGamer(gamerId: ID!, gameId: ID!, creditAmount: Int!): GamerDTO!
}

type Query {
    findGamersWithMaxCreditsForEachGameBaseOnLevel: [GamerCreditDTO]!
    gameDataSearch(gamerName: String, gameName: String, level: String, geography: String): [GamerDataDTO]
}